// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bojik/otus-golang/hw12_13_14_15_calendar/internal/storage (interfaces: DataKeeper)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	storage "github.com/bojik/otus-golang/hw12_13_14_15_calendar/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockDataKeeper is a mock of DataKeeper interface.
type MockDataKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDataKeeperMockRecorder
}

// MockDataKeeperMockRecorder is the mock recorder for MockDataKeeper.
type MockDataKeeperMockRecorder struct {
	mock *MockDataKeeper
}

// NewMockDataKeeper creates a new mock instance.
func NewMockDataKeeper(ctrl *gomock.Controller) *MockDataKeeper {
	mock := &MockDataKeeper{ctrl: ctrl}
	mock.recorder = &MockDataKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataKeeper) EXPECT() *MockDataKeeperMockRecorder {
	return m.recorder
}

// DeleteEvent mocks base method.
func (m *MockDataKeeper) DeleteEvent(arg0 *storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockDataKeeperMockRecorder) DeleteEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockDataKeeper)(nil).DeleteEvent), arg0)
}

// DeleteEventById mocks base method.
func (m *MockDataKeeper) DeleteEventByID(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventById indicates an expected call of DeleteEventById.
func (mr *MockDataKeeperMockRecorder) DeleteEventById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventByID", reflect.TypeOf((*MockDataKeeper)(nil).DeleteEventByID), arg0)
}

// DeleteOldEvents mocks base method.
func (m *MockDataKeeper) DeleteOldEvents() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOldEvents")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOldEvents indicates an expected call of DeleteOldEvents.
func (mr *MockDataKeeperMockRecorder) DeleteOldEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOldEvents", reflect.TypeOf((*MockDataKeeper)(nil).DeleteOldEvents))
}

// FindByID mocks base method.
func (m *MockDataKeeper) FindByID(arg0 string) (*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockDataKeeperMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDataKeeper)(nil).FindByID), arg0)
}

// InsertEvent mocks base method.
func (m *MockDataKeeper) InsertEvent(arg0 *storage.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEvent", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEvent indicates an expected call of InsertEvent.
func (mr *MockDataKeeperMockRecorder) InsertEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEvent", reflect.TypeOf((*MockDataKeeper)(nil).InsertEvent), arg0)
}

// SelectAll mocks base method.
func (m *MockDataKeeper) SelectAll() ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll")
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockDataKeeperMockRecorder) SelectAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockDataKeeper)(nil).SelectAll))
}

// SelectDay mocks base method.
func (m *MockDataKeeper) SelectDay(arg0 time.Time) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectDay", arg0)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectDay indicates an expected call of SelectDay.
func (mr *MockDataKeeperMockRecorder) SelectDay(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectDay", reflect.TypeOf((*MockDataKeeper)(nil).SelectDay), arg0)
}

// SelectInterval mocks base method.
func (m *MockDataKeeper) SelectInterval(arg0, arg1 time.Time) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectInterval", arg0, arg1)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectInterval indicates an expected call of SelectInterval.
func (mr *MockDataKeeperMockRecorder) SelectInterval(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectInterval", reflect.TypeOf((*MockDataKeeper)(nil).SelectInterval), arg0, arg1)
}

// SelectMonth mocks base method.
func (m *MockDataKeeper) SelectMonth(arg0 time.Time) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectMonth", arg0)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectMonth indicates an expected call of SelectMonth.
func (mr *MockDataKeeperMockRecorder) SelectMonth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectMonth", reflect.TypeOf((*MockDataKeeper)(nil).SelectMonth), arg0)
}

// SelectToNotify mocks base method.
func (m *MockDataKeeper) SelectToNotify() ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectToNotify")
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectToNotify indicates an expected call of SelectToNotify.
func (mr *MockDataKeeperMockRecorder) SelectToNotify() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectToNotify", reflect.TypeOf((*MockDataKeeper)(nil).SelectToNotify))
}

// SelectWeek mocks base method.
func (m *MockDataKeeper) SelectWeek(arg0 time.Time) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWeek", arg0)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWeek indicates an expected call of SelectWeek.
func (mr *MockDataKeeperMockRecorder) SelectWeek(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWeek", reflect.TypeOf((*MockDataKeeper)(nil).SelectWeek), arg0)
}

// UpdateEvent mocks base method.
func (m *MockDataKeeper) UpdateEvent(arg0 *storage.Event) (*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0)
	ret0, _ := ret[0].(*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockDataKeeperMockRecorder) UpdateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockDataKeeper)(nil).UpdateEvent), arg0)
}

// UpdateSentFlag mocks base method.
func (m *MockDataKeeper) UpdateSentFlag(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSentFlag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSentFlag indicates an expected call of UpdateSentFlag.
func (mr *MockDataKeeperMockRecorder) UpdateSentFlag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSentFlag", reflect.TypeOf((*MockDataKeeper)(nil).UpdateSentFlag), arg0)
}
