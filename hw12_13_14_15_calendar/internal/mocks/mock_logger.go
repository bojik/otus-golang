// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bojik/otus-golang/hw12_13_14_15_calendar/internal/logger (interfaces: Logger)

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	logger "github.com/bojik/otus-golang/hw12_13_14_15_calendar/internal/logger"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// AddLogFile mocks base method.
func (m *MockLogger) AddLogFile(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogFile", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLogFile indicates an expected call of AddLogFile.
func (mr *MockLoggerMockRecorder) AddLogFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogFile", reflect.TypeOf((*MockLogger)(nil).AddLogFile), arg0)
}

// AddWriter mocks base method.
func (m *MockLogger) AddWriter(arg0 logger.SyncWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWriter", arg0)
}

// AddWriter indicates an expected call of AddWriter.
func (mr *MockLoggerMockRecorder) AddWriter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWriter", reflect.TypeOf((*MockLogger)(nil).AddWriter), arg0)
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 string, arg1 ...logger.Parameter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string, arg1 ...logger.Parameter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string, arg1 ...logger.Parameter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// ResetWriters mocks base method.
func (m *MockLogger) ResetWriters() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetWriters")
}

// ResetWriters indicates an expected call of ResetWriters.
func (mr *MockLoggerMockRecorder) ResetWriters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetWriters", reflect.TypeOf((*MockLogger)(nil).ResetWriters))
}

// Save mocks base method.
func (m *MockLogger) Save(arg0 logger.Level, arg1 string, arg2 ...logger.Parameter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Save", varargs...)
}

// Save indicates an expected call of Save.
func (mr *MockLoggerMockRecorder) Save(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLogger)(nil).Save), varargs...)
}
